#!/usr/bin/env python
# -*- coding: utf-8
#
# Gibran Fuentes-Pineda <gibranfp@unam.mx>
# IIMAS, UNAM
# 2018
#
# -------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# -------------------------------------------------------------------------
"""
Utilities to read topic coherence from files
"""

def read_coherence_from_file(filepath):
    """
    Reads coherences from a file generated by https://github.com/jhlau/topic_interpretability.

    [coherence1] ( coherence1; ) word1_topic1 word2_topic1 ...
    [coherence2] ( coherence2; ) word1_topic2 word2_topic2 ...
    ...                ...            ...
    [coherenceK] ( coherenceK; ) word1_topicK word2_topicK ...
    ==========================================================================
    Average Topic Coherence = 
    Median Topic Coherence =
    """
    print "Reading topic coherences from", filepath
    coherences = []
    with open(filepath) as f:
        content = f.readlines()
        for line in content:
            line = line.translate(None, "[]();")
            if line.startswith('='):
                 continue
            else:
                line = line.split()
                if line[0] == 'Average':
                    average = float(line[4])
                elif line[0] == 'Median':
                    median = float(line[4])
                else:

                    coherences.append(float(line[0]))

    return coherences, average, median

def read_multiple_coherence_files(paths):
    """
    Reads multiple coherences from a list of file paths.
    """
    coherences = []
    for p in paths:
        c, a, m = read_coherence_from_file(p)
        coherences.append(c)
        
    return coherences

def read_config_file(filepath):
    """
    Reads configuration file and returns a list of topic file paths
    and corresponding labels. Configuration files is organized as follows:

    path_to_topic_file1 label1
    path_to_topic_file1 label2
    ...
    """
    paths = []
    labels = []

    print "Reading topic files and labels from", filepath
    with open(filepath) as f:
        content = f.readlines()
        for entry in content:
            if not entry.startswith('#'):
                p,l = entry.split(";")
                paths.append(p)
                labels.append(l)

    return paths, labels
